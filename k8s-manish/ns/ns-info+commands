üß≠ **What is a Namespace in Kubernetes?**  
A **namespace** in Kubernetes is like a virtual cluster within your physical cluster.
It helps organize and isolate resources such as Pods, ReplicaSets (RS), Services, and Deployments. 
Think of it as a way to divide your cluster into logical partitions for better management, especially when multiple teams or 
environments (like dev, staging, prod) share the same infrastructure.

---

üì¶ **How Namespaces Work**  
- Each namespace contains its own set of Kubernetes objects.
- Resources inside a namespace are **isolated** from those in other namespaces.
- You can apply **resource quotas** and **access controls** per namespace.
- Namespaces are only applicable to **namespaced objects** (e.g., Pods, Services, Deployments), not cluster-wide objects 
(e.g., Nodes, PersistentVolumes).

---

üõ†Ô∏è **Example: Creating a Namespace and Deploying a Pod**

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: dev-environment
```
or
kubectl create ns dev-environment

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: dev-environment
spec:
  containers:
  - name: nginx
    image: nginx
```

# Run the Pod in dev-environment namespace (ns)
kubectl run nginx-pod --image nginx -n dev-environment

# Get the pod from  dev-environment ns.
kubectl get pod -n dev-environment   

# Get the pod from all ns
kubectl get pod -A

[node1 ~]$ kubectl create namespace dev-environment
namespace/dev-environment created
[node1 ~]$ kubectl run nginx-pod --image nginx:latest -n dev-environment
pod/nginx-pod created
[node1 ~]$ kubectl get pods -n dev-environment 
NAME        READY   STATUS    RESTARTS   AGE
nginx-pod   1/1     Running   0          9s


# Create using yaml file.

kubectl apply -f https://raw.githubusercontent.com/manish-gokhare/Purdue_k8s/master/k8s-manish/ns/ns.yml


# describe ns

[node1 ~]$ kubectl describe ns dev-environment 
Name:         dev-environment
Labels:       kubernetes.io/metadata.name=dev-environment
Annotations:  <none>
Status:       Active

No resource quota.

No LimitRange resource.


This creates a namespace called `dev-environment` and deploys an `nginx` pod inside it. 
You can do the same for ReplicaSets, Services, and Deployments by specifying the `namespace` field.

---

üîó **Relation to Other Kubernetes Objects**

| Object       | Namespace Scope | Description |
|--------------|------------------|-------------|
| Pod          | ‚úÖ Yes            | Runs inside a namespace and isolated from others. |
| ReplicaSet   | ‚úÖ Yes            | Manages pod replicas within a namespace. |
| Deployment   | ‚úÖ Yes            | Controls ReplicaSets and Pods in a namespace. |
| Service      | ‚úÖ Yes            | Exposes Pods within the same namespace. |
| Node         | ‚ùå No             | Cluster-wide resource, not tied to any namespace. |
| PersistentVolume | ‚ùå No         | Shared across namespaces. |

---

üéØ **Why Use Namespaces?**
- **Environment Segregation**: Separate dev, test, and prod workloads.
- **Team Isolation**: Different teams can manage their own resources independently.
- **Security & Access Control**: Apply RBAC policies per namespace.
- **Resource Management**: Set quotas to prevent resource hogging.

---


kubectl get ns

Default namespace is "default".

To work in islate environment environment. We need to create ns.
hadoop-ns
db-ns
kafka-ns
monitoring-ns


How to create a full deployment in the namespace?.
