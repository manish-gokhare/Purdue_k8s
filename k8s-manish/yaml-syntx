YAML template containing the basic structure you'd need to create a pod in Kubernetes

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-1
  namespace: default
  labels:
    run: nginx-pod-1
spec:
  containers:
  - name: nginx-pod-1
    image: nginx
    imagePullPolicy: Always
```

### üßæ Breakdown of the Sections:
- **`apiVersion`**: Defines which version of the Kubernetes API you're using.
- **`kind`**: This is a Pod resource.
- **`metadata`**: Includes the pod‚Äôs name, namespace, and labels (used for organization or selection).
- **`spec`**: Describes what containers will run ‚Äî in this case, a single container running the latest NGINX image.

It's clearer to say ‚Äúlabels is one of the keys in the metadata dictionary‚Äù which itself is another dictionary containing key-value pairs used for classification and filtering."

Python version:

metadata = {
    "name": "nginx-pod-1",
    "namespace": "default",
    "labels": {
        "run": "nginx-pod-1"
    },
    "creationTimestamp": "2025-08-02T05:03:08Z",
    "resourceVersion": "852",
    "uid": "01053dfa-8bc0-4d31-9245-4240961acbac"
}


spec:
  containers:
  - name: nginx-pod-1
    image: nginx
    imagePullPolicy: Always
  - name: httpd-pod-2
    image: httpd
    imagePullPolicy: Always
  - name: busybox-helper
    image: busybox
    imagePullPolicy: IfNotPresent
    command: ["sleep", "3600"]


Python Equivalent:

spec = {
    "containers": [
        {
            "name": "nginx-pod-1",
            "image": "nginx",
            "imagePullPolicy": "Always"
        },
        {
            "name": "httpd-pod-2",
            "image": "httpd",
            "imagePullPolicy": "Always"
        },
        {
            "name": "busybox-helper",
            "image": "busybox",
            "imagePullPolicy": "IfNotPresent",
            "command": ["sleep", "3600"]
        }
    ]
}

Absolutely, Manish! Here‚Äôs a clear breakdown of the `spec` dictionary in terms of Python data types ‚Äî great for documentation purposes and understanding the internal structure of Kubernetes pod specs.

---

## üß† Python Data Type Breakdown

```python
spec = {                      # dict
    "containers": [           # key: str, value: list
        {
            "name": "nginx-pod-1",            # str
            "image": "nginx",                 # str
            "imagePullPolicy": "Always"       # str
        },
        {
            "name": "httpd-pod-2",            # str
            "image": "httpd",                 # str
            "imagePullPolicy": "Always"       # str
        },
        {
            "name": "busybox-helper",         # str
            "image": "busybox",               # str
            "imagePullPolicy": "IfNotPresent",# str
            "command": ["sleep", "3600"]      # list[str]
        }
    ]
}
```

---

## üìò Summary Table of Field Data Types

| Field             | Type         | Description                                           |
|------------------|--------------|-------------------------------------------------------|
| `spec`           | `dict`       | Top-level dictionary                                  |
| `containers`     | `list`       | List of container specs                               |
| Each container   | `dict`       | Container definition with name/image/policy/etc.      |
| `name`           | `str`        | Container‚Äôs identifier                                |
| `image`          | `str`        | Docker image name                                     |
| `imagePullPolicy`| `str`        | Policy for pulling image (`Always`, `IfNotPresent`)   |
| `command`        | `list[str]`  | Optional: command to run inside container             |

---
