üè∑Ô∏è What Are Labels?
Labels are key-value pairs attached to Kubernetes objects (including Pods). They‚Äôre used for:

Organizing and categorizing Pods (e.g., by app name, environment, version)

Selecting Pods for operations like deployment, monitoring, or traffic routing

Grouping Pods logically even if they‚Äôre physically on different nodes

YAMl- Declare pod with label

```
apiVersion: v1
kind: Pod
metadata:
  name: my-app-pod
  labels:
    app: my-app
    tier: frontend
    env: staging
spec:
  containers:
  - name: my-container
    image: nginx

```

[node1 ~]$ kubectl get pod my-app-pod --show-labels
NAME         READY   STATUS    RESTARTS   AGE     LABELS
my-app-pod   1/1     Running   0          2m37s   app=my-app,env=staging,tier=frontend

# We can check the labels on the k8s resources using --show-labels

[node1 ~]$ kubectl run firstpod --image nginx     # label will be assigned automatically if not specifed run=<nameOfPod>
pod/firstpod created

[node1 ~]$ kubectl get pod --show-labels
NAME         READY   STATUS    RESTARTS   AGE     LABELS
firstpod     1/1     Running   0          14s     run=firstpod
my-app-pod   1/1     Running   0          7m18s   app=my-app,env=staging,tier=frontend
[node1 ~]$ 


[node1 ~]$ kubectl get nodes --show-labels
NAME    STATUS   ROLES           AGE   VERSION   LABELS
node1   Ready    control-plane   49m   v1.27.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/
arch=amd64,kubernetes.io/hostname=node1,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node.kubernetes.io/
exclude-from-external-load-balancers=
node2   Ready    <none>          48m   v1.27.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/
arch=amd64,kubernetes.io/hostname=node2,kubernetes.io/os=linux
node3   Ready    <none>          48m   v1.27.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/
arch=amd64,kubernetes.io/hostname=node3,kubernetes.io/os=linux

Absolutely! Here's a clear guide for working with **labels on Pods** using the **Kubernetes CLI (`kubectl`)**:

---

## üè∑Ô∏è View Labels on a Pod

To **see all labels** on a Pod:

```bash
kubectl get pod <pod-name> --show-labels
```

Example:
```bash
kubectl get pod my-app-pod --show-labels
```

To get labels more cleanly:
```bash
kubectl get pod <pod-name> -o jsonpath='{.metadata.labels}'
```

[node1 ~]$ kubectl get pod --show-labels
NAME         READY   STATUS    RESTARTS   AGE    LABELS
fifthpod     1/1     Running   0          15s    run=fifthpod
firstpod     1/1     Running   0          8m1s   run=firstpod
fourthpod    1/1     Running   0          22s    run=fourthpod
my-app-pod   1/1     Running   0          15m    app=my-app,env=staging,tier=frontend
secondpod    1/1     Running   0          36s    run=secondpod
thirdpod     1/1     Running   0          29s    run=thirdpod

[node1 ~]$ kubectl get pod secondpod --show-labels
NAME        READY   STATUS    RESTARTS   AGE   LABELS
secondpod   1/1     Running   0          64s   run=secondpod

[node1 ~]$ kubectl get pod my-app-pod -o jsonpath='{.metadata.labels}'
{"app":"my-app","env":"staging","tier":"frontend"}

---

## ‚ûï Add or Update Labels on a Pod

To **add a new label** or **update an existing one**:

```bash
kubectl label pod <pod-name> <label-key>=<label-value>
```

Example:
```bash
kubectl label pod my-app-pod version=v2
```

If the label already exists, this command updates it without error. However same label cannot be updated.

[node1 ~]$ kubectl label pod firstpod env=dev team=adam
pod/firstpod labeled

[node1 ~]$ kubectl get pod firstpod --show-labels                     
NAME       READY   STATUS    RESTARTS   AGE   LABELS
firstpod   1/1     Running   0          13m   env=dev,run=firstpod,team=adam

[node1 ~]$ kubectl label pod firstpod env=dev team=new-adamp    # not able to update the label 'team'
error: 'team' already has a value (adam), and --overwrite is false

[node1 ~]$ kubectl label pod firstpod env=dev team- team=new-adam  # does not work 
error: can not both modify and remove a label in the same command

[node1 ~]$ kubectl label pod firstpod env=dev team-              # First remove it   'label-'
pod/firstpod unlabeled

[node1 ~]$ kubectl get pod firstpod --show-labels    # Label team is remove
NAME       READY   STATUS    RESTARTS   AGE   LABELS
firstpod   1/1     Running   0          14m   env=dev,run=firstpod

[node1 ~]$ kubectl label pod firstpod team=newadam   # label the pod with newvalue 
pod/firstpod labeled

[node1 ~]$ kubectl get pod firstpod --show-labels
NAME       READY   STATUS    RESTARTS   AGE   LABELS
firstpod   1/1     Running   0          17m   env=dev,run=firstpod,team=newadam




---

## ‚ùå Remove a Label from a Pod

To **remove a label** from a Pod:

```bash
kubectl label pod <pod-name> <label-key>-
```

Example:
```bash
kubectl label pod my-app-pod env-
```

This removes the `env` label from the Pod.


---

## üîç Filter Pods by Label

To **list Pods** with a specific label:

```bash
kubectl get pods -l <label-key>=<label-value>
```

Example:
```bash
kubectl get pods -l app=my-app
```

[node1 ~]$ kubectl get pod -l team=CTS  

NAME       READY   STATUS    RESTARTS   AGE
firstpod   1/1     Running   0          29m
thirdpod   1/1     Running   0          22m


---

### üí° Bonus: Verify Changes

You can verify your label updates like this:
```bash
kubectl describe pod <pod-name>
```

This shows label changes along with other Pod metadata and status.

---

Want me to bundle this up into a cheat sheet or expand to Deployments or Services next? Your Kubernetes command toolkit is about to get ninja-level! ü•∑

[node1 ~]$ kubectl get pod --show-labels
NAME         READY   STATUS    RESTARTS   AGE    LABELS
fifthpod     1/1     Running   0          15s    run=fifthpod
firstpod     1/1     Running   0          8m1s   run=firstpod
fourthpod    1/1     Running   0          22s    run=fourthpod
my-app-pod   1/1     Running   0          15m    app=my-app,env=staging,tier=frontend
secondpod    1/1     Running   0          36s    run=secondpod
thirdpod     1/1     Running   0          29s    run=thirdpod
[node1 ~]$ kubectl get pod secondpod --show-labels
NAME        READY   STATUS    RESTARTS   AGE   LABELS
secondpod   1/1     Running   0          64s   run=secondpod

