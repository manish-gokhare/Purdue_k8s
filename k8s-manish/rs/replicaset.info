### 🧠 What Is a ReplicaSet?

A **ReplicaSet** is a Kubernetes controller that ensures a specified number of identical **Pods** are running at any given time. If a Pod crashes or is deleted, the ReplicaSet automatically creates a new one to maintain the desired count.

---

### 🔧 Key Components

- **replicas**: Number of Pods to maintain.
- **selector**: Labels used to identify which Pods the ReplicaSet should manage.
- **template**: Blueprint for the Pods that will be created.

---

### 📄 Example YAML

Here’s a simple YAML file to create a ReplicaSet that runs 3 Nginx Pods:

```yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-replicaset
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
```

---

### ⚙️ How to Use It

1. **Save the YAML** as `replicaset.yaml`.
2. **Apply it** to your cluster:
   ```bash
   kubectl apply -f replicaset.yaml
   ```
3. **Check status**:
   ```bash
   kubectl get replicasets
   kubectl get pods


```

✅ What Labels Are Matching?
There are two places where the label app: nginx appears:

ReplicaSet metadata:

labels: app: nginx — this is mostly for identifying the ReplicaSet itself (not related to Pod management).

Pod template metadata:

labels: app: nginx — this is critical, because Pods created by the ReplicaSet get this label.


🎯 What Happens When You Apply This YAML

Kubernetes sees:

You want a ReplicaSet called nginx-replicaset

It should maintain 3 Pods

Each Pod should have the label app: nginx

Each Pod should run an Nginx container (nginx:latest)
